import pickle
import operator
import copy

# max guessing_word length is 19
FIRST_GUESS = [
    [],
    [('a', 1), ('i', 1), ('c', 1), ('e', 1), ('s', 1), ('x', 1), ('n', 1), ('b', 1), ('t', 1), ('d', 1), ('m', 1), ('r', 1), ('p', 1), ('f', 1), ('l', 1), ('w', 1), ('o', 1), ('g', 1), ('h', 1), ('v', 1), ('k', 1), ('y', 1), ('j', 1),
     ('u', 1), ('q', 1), ('z', 1)],
    [('o', 52), ('f', 52), ('t', 52), ('i', 52), ('n', 52), ('s', 52), ('b', 52), ('y', 52), ('r', 52), ('e', 52), ('a', 52), ('w', 52), ('u', 52), ('m', 52), ('d', 52), ('h', 52), ('p', 52), ('g', 52), ('k', 52), ('c', 52), ('v', 52),
     ('l', 52), ('x', 52), ('z', 52), ('j', 52), ('q', 52)],
    [('s', 1843), ('a', 1841), ('m', 1777), ('c', 1761), ('p', 1754), ('e', 1748), ('t', 1746), ('d', 1739), ('r', 1730), ('l', 1714), ('i', 1707), ('b', 1679), ('n', 1624), ('o', 1606), ('f', 1605), ('h', 1558), ('g', 1514), ('w', 1454),
     ('u', 1445), ('k', 1359), ('v', 1316), ('j', 1136), ('x', 1019), ('y', 933), ('z', 673), ('q', 650)],
    [('a', 11944), ('s', 10128), ('e', 8612), ('c', 8141), ('i', 8037), ('o', 7145), ('r', 6637), ('t', 6042), ('n', 5733), ('p', 5506), ('l', 5333), ('m', 5266), ('d', 5231), ('u', 4233), ('b', 3798), ('h', 3532), ('f', 3196), ('g', 3168),
     ('k', 2632), ('w', 2392), ('y', 2104), ('v', 1877), ('z', 1148), ('x', 1146), ('j', 1108), ('q', 471)],
    [('a', 21942), ('e', 18907), ('o', 14627), ('i', 13749), ('s', 13683), ('r', 12185), ('n', 11447), ('l', 10375), ('t', 9856), ('c', 7422), ('d', 6970), ('m', 6957), ('u', 6806), ('h', 5633), ('g', 5584), ('p', 5511), ('b', 5003),
     ('k', 4966), ('y', 4617), ('f', 3208), ('v', 2597), ('w', 2391), ('z', 1868), ('j', 1485), ('x', 1456), ('q', 420)],
    [('e', 31958), ('a', 30287), ('o', 20464), ('i', 20458), ('r', 20434), ('n', 19628), ('s', 19223), ('l', 16516), ('t', 15454), ('m', 10200), ('d', 10083), ('c', 10014), ('u', 9742), ('h', 8252), ('g', 7947), ('p', 7255), ('b', 7063),
     ('k', 6331), ('y', 5916), ('f', 3930), ('v', 3622), ('w', 3569), ('z', 2040), ('x', 1677), ('j', 1567), ('q', 610)],
    [('e', 37703), ('a', 34502), ('i', 26155), ('r', 25560), ('n', 24240), ('s', 23527), ('o', 22954), ('l', 20322), ('t', 20052), ('c', 13001), ('d', 12422), ('m', 11486), ('u', 11135), ('h', 9730), ('g', 9526), ('p', 8744), ('b', 8343),
     ('k', 6337), ('y', 5580), ('f', 5118), ('w', 4653), ('v', 3788), ('z', 2121), ('x', 1702), ('j', 1373), ('q', 745)],
    [('e', 38466), ('a', 34060), ('i', 27148), ('r', 26098), ('n', 24524), ('s', 24224), ('o', 23727), ('t', 21864), ('l', 20412), ('c', 14097), ('d', 12668), ('m', 11428), ('u', 11310), ('h', 9807), ('g', 9523), ('p', 8929), ('b', 7855),
     ('k', 6061), ('f', 5396), ('y', 4984), ('w', 4887), ('v', 3874), ('z', 1698), ('x', 1463), ('j', 1112), ('q', 793)],
    [('e', 35456), ('a', 28382), ('i', 25064), ('r', 23895), ('s', 22431), ('n', 21972), ('o', 21843), ('t', 20873), ('l', 17547), ('c', 13104), ('d', 11346), ('m', 9953), ('u', 9802), ('h', 8911), ('g', 8240), ('p', 8154), ('b', 6703),
     ('k', 4747), ('w', 4486), ('f', 4394), ('y', 4256), ('v', 3610), ('z', 1343), ('x', 1117), ('j', 758), ('q', 636)],
    [('e', 29488), ('a', 21699), ('i', 21388), ('r', 20006), ('s', 18577), ('n', 18227), ('t', 17941), ('o', 17888), ('l', 14224), ('c', 11199), ('d', 8761), ('m', 7959), ('u', 7938), ('h', 7025), ('p', 6990), ('g', 6597), ('b', 5501),
     ('f', 3507), ('y', 3444), ('w', 3372), ('k', 3284), ('v', 3033), ('z', 1081), ('x', 855), ('j', 537), ('q', 479)],
    [('e', 21091), ('i', 16524), ('a', 15105), ('r', 14311), ('t', 13638), ('n', 13490), ('s', 13339), ('o', 12703), ('l', 10141), ('c', 8506), ('d', 5751), ('m', 5674), ('u', 5440), ('p', 5245), ('h', 4946), ('g', 4666), ('b', 3497),
     ('y', 2649), ('f', 2328), ('v', 2250), ('w', 2228), ('k', 1983), ('z', 679), ('x', 603), ('j', 323), ('q', 308)],
    [('e', 14023), ('i', 11546), ('a', 10164), ('r', 9631), ('t', 9597), ('n', 9359), ('s', 9017), ('o', 8987), ('l', 6602), ('c', 6087), ('m', 3914), ('p', 3771), ('u', 3699), ('d', 3572), ('h', 3437), ('g', 3070), ('b', 2180),
     ('y', 1878), ('v', 1487), ('w', 1465), ('f', 1437), ('k', 1117), ('z', 509), ('x', 406), ('j', 207), ('q', 206)],
    [('e', 8601), ('i', 7742), ('a', 6592), ('t', 6390), ('n', 6213), ('o', 6171), ('r', 6026), ('s', 5583), ('l', 4139), ('c', 4097), ('m', 2683), ('p', 2444), ('u', 2316), ('d', 2197), ('h', 2045), ('g', 1924), ('b', 1376), ('y', 1342),
     ('w', 974), ('f', 953), ('v', 867), ('k', 587), ('z', 303), ('x', 285), ('j', 117), ('q', 115)],
    [('e', 5208), ('i', 4965), ('t', 4130), ('a', 4114), ('o', 4078), ('n', 3931), ('r', 3622), ('s', 3498), ('c', 2608), ('l', 2518), ('m', 1671), ('p', 1525), ('u', 1498), ('d', 1362), ('h', 1199), ('g', 1060), ('y', 821), ('b', 797),
     ('w', 735), ('v', 533), ('f', 533), ('k', 357), ('z', 258), ('x', 175), ('j', 86), ('q', 70)],
    [('e', 3391), ('i', 3122), ('o', 2603), ('t', 2594), ('n', 2507), ('a', 2483), ('r', 2351), ('s', 2116), ('c', 1702), ('l', 1590), ('m', 1133), ('p', 1025), ('u', 914), ('h', 856), ('d', 788), ('g', 665), ('y', 572), ('w', 514),
     ('b', 425), ('f', 364), ('v', 310), ('k', 236), ('z', 154), ('x', 117), ('j', 62), ('q', 46)],
    [('e', 2140), ('i', 1840), ('o', 1656), ('a', 1654), ('t', 1646), ('n', 1543), ('r', 1506), ('s', 1347), ('c', 1094), ('l', 955), ('m', 760), ('p', 676), ('u', 600), ('h', 560), ('d', 492), ('w', 442), ('g', 415), ('y', 358),
     ('b', 285), ('f', 214), ('v', 190), ('k', 144), ('z', 73), ('x', 65), ('j', 44), ('q', 37)],
    [('e', 1431), ('i', 1166), ('t', 1100), ('o', 1077), ('n', 1016), ('a', 1011), ('r', 968), ('s', 796), ('c', 742), ('l', 639), ('m', 464), ('p', 419), ('u', 350), ('d', 340), ('h', 340), ('g', 281), ('w', 250), ('y', 231), ('b', 195),
     ('f', 129), ('v', 102), ('k', 98), ('z', 53), ('x', 53), ('j', 26), ('q', 17)],
    [('e', 909), ('i', 739), ('t', 692), ('o', 644), ('r', 618), ('n', 602), ('s', 597), ('a', 590), ('c', 437), ('l', 384), ('m', 291), ('p', 255), ('h', 234), ('u', 232), ('d', 197), ('g', 187), ('w', 175), ('y', 125), ('b', 114),
     ('f', 106), ('k', 76), ('v', 75), ('z', 29), ('x', 24), ('q', 10), ('j', 10)],
    [('e', 685), ('t', 485), ('o', 467), ('r', 459), ('i', 452), ('a', 432), ('n', 423), ('s', 369), ('c', 342), ('l', 270), ('p', 185), ('m', 184), ('h', 157), ('u', 156), ('d', 142), ('w', 137), ('g', 115), ('y', 91), ('f', 87),
     ('b', 80), ('v', 44), ('k', 35), ('x', 20), ('z', 16), ('j', 11), ('q', 8)],
]

pickle.dump(FIRST_GUESS, open('FIRST_GUESS.pkl', 'wb'))


def check_match(current_word: str, known_letters: str) -> (bool, str):
    """

    Parameters
    ----------
    word (str): guessing_word to be compared
    known_letters_pattern (str): currently known letters

    Returns
    -------
    (bool): could the known letters be the current guessing_word
    (dict): missing letters
    """
    missing_letters = ''

    for l0, l1 in zip(current_word, known_letters):
        if l1 != '*':
            if l0 != l1:
                return False, {}
        else:
            missing_letters += l0
    return True, missing_letters


def get_letter_frequency(str_list):
    letters = {}
    for word, freq in str_list:
        for letter in word:
            letters[letter] = letters.get(letter, 0) + 1
    return letters


master_words = pickle.load(open(f'subsets/{5}.pkl', 'rb'))
total_wrong = 0
for word_to_be_guessed in master_words[1000:1100]:
    # guessing_word to be guessed
    # word_to_be_guessed = 'happy'

    word_to_be_guessed = word_to_be_guessed[0]

    # print(word_to_be_guessed)
    word_length = len(word_to_be_guessed)
    current_known = '*' * word_length
    # possible_words come from https://norvig.com/ngrams/count_1w.txt
    words = copy.deepcopy(master_words)
    # get guessing_word list with matching length

    # print(len(possible_words))
    letter_frequency = FIRST_GUESS[word_length]
    guessed_letters = []
    wrong = 0
    while word_to_be_guessed != current_known and len(guessed_letters) < 100:

        guess_list = sorted(list(letter_frequency), key=lambda x: x[1], reverse=True)
        # print(guess_list)
        correct = False
        for guess, _ in guess_list:
            if guess in guessed_letters:
                continue
            # print(guess)
            for i, letter in enumerate(word_to_be_guessed):
                if guess == letter:
                    current_known = current_known[:i] + letter + current_known[i + 1:]
                    correct = True
            guessed_letters.append(guess)
            if correct:
                break
            else:
                wrong += 1

        new_words = []
        leftover_letters = []
        for word in words:
            match, letters = check_match(word[0], current_known)
            if match:
                leftover_letters.append((letters, word[1]))
                new_words.append(word)
        letter_frequency = get_letter_frequency(leftover_letters).items()
        words = new_words
        # print(sorted(possible_words,key=lambda x:x[1],reverse=True))
        # print(len(possible_words))
        # print(current_known)
        # print(guessed_letters)

    # print(f'Guessed {word_to_be_guessed} in {len(guessed_letters)} letters')
    print(f'Guessed {word_to_be_guessed} with {wrong} wrong guesses')
    total_wrong += wrong
print(total_wrong)
